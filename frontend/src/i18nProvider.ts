//Source code generated by AppGPT (www.appgpt.tech)
import { mergeTranslations } from 'ra-core';
import polyglotI18nProvider from 'ra-i18n-polyglot';
import enOriginal from 'ra-language-english';
import frOriginal from 'ra-language-french';
import grOriginal from 'ra-language-greek';

const enResources = {
  resources: {
    User: {
      name: 'User',
      fields: {
        id: 'Id',
        name: 'Name',
        email: 'Email',
        password: 'Password',
        role: 'Role',
        registration_date: 'Registration_date',
      },
    },
    Section: {
      name: 'Section',
      fields: {
        id: 'Id',
        name: 'Name',
        date_created: 'Date_created',
        description: 'Description',
      },
    },
    Book: {
      name: 'Book',
      fields: {
        id: 'Id',
        name: 'Name',
        content: 'Content',
        author: 'Author',
        section_id: 'Section_id',
        date_issued: 'Date_issued',
        return_date: 'Return_date',
        language: 'Language',
        number_of_pages: 'Number_of_pages',
        created_at: 'Created_at',
      },
    },
    Bookrequest: {
      name: 'Book Request',
      fields: {
        id: 'Id',
        user_id: 'User_id',
        book_id: 'Book_id',
        request_date: 'Request_date',
        issue_date: 'Issue_date',
        return_date: 'Return_date',
        status: 'Status',
      },
    },
    Feedback: {
      name: 'Feedback',
      fields: {
        id: 'Id',
        user_id: 'User_id',
        book_id: 'Book_id',
        rating: 'Rating',
        comment: 'Comment',
        created_at: 'Created_at',
      },
    },
  },
};
const frResources = {
  resources: {
    User: {
      name: 'User (fr)',
      fields: {
        id: 'Id (fr)',
        name: 'Name (fr)',
        email: 'Email (fr)',
        password: 'Password (fr)',
        role: 'Role (fr)',
        registration_date: 'Registration_date (fr)',
      },
    },
    Section: {
      name: 'Section (fr)',
      fields: {
        id: 'Id (fr)',
        name: 'Name (fr)',
        date_created: 'Date_created (fr)',
        description: 'Description (fr)',
      },
    },
    Book: {
      name: 'Book (fr)',
      fields: {
        id: 'Id (fr)',
        name: 'Name (fr)',
        content: 'Content (fr)',
        author: 'Author (fr)',
        section_id: 'Section_id (fr)',
        date_issued: 'Date_issued (fr)',
        return_date: 'Return_date (fr)',
        language: 'Language (fr)',
        number_of_pages: 'Number_of_pages (fr)',
        created_at: 'Created_at (fr)',
      },
    },
    Bookrequest: {
      name: 'Book Request (fr)',
      fields: {
        id: 'Id (fr)',
        user_id: 'User_id (fr)',
        book_id: 'Book_id (fr)',
        request_date: 'Request_date (fr)',
        issue_date: 'Issue_date (fr)',
        return_date: 'Return_date (fr)',
        status: 'Status (fr)',
      },
    },
    Feedback: {
      name: 'Feedback (fr)',
      fields: {
        id: 'Id (fr)',
        user_id: 'User_id (fr)',
        book_id: 'Book_id (fr)',
        rating: 'Rating (fr)',
        comment: 'Comment (fr)',
        created_at: 'Created_at (fr)',
      },
    },
  },
};
const grResources = {
  resources: {
    User: {
      name: 'User (gr)',
      fields: {
        id: 'Id (gr)',
        name: 'Name (gr)',
        email: 'Email (gr)',
        password: 'Password (gr)',
        role: 'Role (gr)',
        registration_date: 'Registration_date (gr)',
      },
    },
    Section: {
      name: 'Section (gr)',
      fields: {
        id: 'Id (gr)',
        name: 'Name (gr)',
        date_created: 'Date_created (gr)',
        description: 'Description (gr)',
      },
    },
    Book: {
      name: 'Book (gr)',
      fields: {
        id: 'Id (gr)',
        name: 'Name (gr)',
        content: 'Content (gr)',
        author: 'Author (gr)',
        section_id: 'Section_id (gr)',
        date_issued: 'Date_issued (gr)',
        return_date: 'Return_date (gr)',
        language: 'Language (gr)',
        number_of_pages: 'Number_of_pages (gr)',
        created_at: 'Created_at (gr)',
      },
    },
    Bookrequest: {
      name: 'Book Request (gr)',
      fields: {
        id: 'Id (gr)',
        user_id: 'User_id (gr)',
        book_id: 'Book_id (gr)',
        request_date: 'Request_date (gr)',
        issue_date: 'Issue_date (gr)',
        return_date: 'Return_date (gr)',
        status: 'Status (gr)',
      },
    },
    Feedback: {
      name: 'Feedback (gr)',
      fields: {
        id: 'Id (gr)',
        user_id: 'User_id (gr)',
        book_id: 'Book_id (gr)',
        rating: 'Rating (gr)',
        comment: 'Comment (gr)',
        created_at: 'Created_at (gr)',
      },
    },
  },
};

const en = mergeTranslations(enOriginal, enResources);
const fr = mergeTranslations(frOriginal, frResources);
const gr = mergeTranslations(grOriginal, grResources);

const translations = { en, fr, gr };
export const i18nProvider = polyglotI18nProvider(
  (locale) => translations[locale],
  'en', //default locale
  [
    { locale: 'en', name: 'English' },
    { locale: 'fr', name: 'Français' },
    { locale: 'gr', name: 'Ελληνικά' },
  ],
);
